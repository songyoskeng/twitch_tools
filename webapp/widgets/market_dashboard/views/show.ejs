<% var storage = widget.storage %>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Market Dashboard</title>
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=Prompt:wght@400;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0"
      crossorigin="anonymous"
    ></script>
    <style>
      html,
      body {
        height: 100%;
        width: 100%;
        font-family: "Prompt", sans-serif;
        overflow-y: scroll;
        overflow-x: hidden;
      }
      .box {
        text-align: center;
      }
      .wrapper {
        height: 100%;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
      }
      #alert-image {
        text-align: center;
        height: 100%;
        width: 100%;
        display: table-cell;
        background-position: center bottom;
        background-repeat: no-repeat;
        background-size: contain;
      }
      body {
        background-color: #151238;
      }

      body {
        color: #e0e1e6;
        padding: 36px 0px 36px;
      }

      .flex-1 {
        flex: 1;
      }
      .flex-2 {
        flex: 2;
      }
      .header {
        margin-bottom: 24px;
      }
      .status {
        content: " ";
        display: inline-block;
        width: 12px;
        height: 12px;
        margin-top: 4px;
        margin-right: 10px;
        margin-left: 10px;
        border: 1px solid #000;
        border-radius: 12px;
      }
      .status.online {
        background-color: #94e185;
        border-color: #78d965;
        box-shadow: 0px 0px 4px 1px #94e185;
      }

      .status.offline {
        background-color: #c9404d;
        border-color: #c42c3b;
        box-shadow: 0px 0px 4px 1px #c9404d;
      }

      .card-dark {
        background-color: #273050;
        color: #e0e1e6;
      }

      .code {
        background-color: #34495e;
        color: #e0e1e6;
      }

      #card-transaction {
        overflow-y: hidden;
        padding-bottom: 14px;
      }

      #card-transaction > .card-body {
        overflow-y: hidden;
      }

      #card-transaction > .card-body > #transaction {
        overflow-y: hidden;
        list-style-type: none;
        padding-left: 0px;
      }

      .time-message {
        font-size:10px;
        color:#95afc0;
      }

      #richest-rank-1 {
        background-color: #fdcb6e;
        color:#34495e;
        padding-top:1.55rem;
        padding-bottom:1.55rem;
      }

      #richest-rank-2 {
        background-color: #dfe6e9;
        color:#34495e;
        padding-top:1.35rem;
        padding-bottom:1.35rem;
      }

      #richest-rank-3 {
        background-color: #fab1a0;
        color:#34495e;
        padding-top:1rem;
        padding-bottom:1rem;
      }
    </style>
    <script
      src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
      integrity="sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.socket.io/3.1.1/socket.io.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/2.0.2/anime.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.15/lodash.min.js"></script>
    <script>
      const socket = io();
      socket.on("widget::<%= widget.id %>", (data) => {
        show(data);
      });
      socket.on("widget::<%= widget.id %>:reload", () => {
        window.location.reload();
      });
    </script>
  </head>

  <body>
    <div class="container animate__animated animate__fadeIn">
      <div class="header">
        <h1 style="display: inline" class="align-middle">Market</h1>
        <div id="market_open"></div>
      </div>

      <div class="row">
        <div class="col-md-6 col-sm-12 col-12">
          <div class="card card-dark mb-3">
            <div
              class="card-body d-flex flex-column"
              style="height: 40vh; min-height: 330px"
            >
              <h5 class="card-title fs-6">Gacha Transaction ðŸ’¸</h5>
              <div id="card-transaction" class="card code" style="flex: 1">
                <div class="card-body">
                  <ul id="transaction">
                    <div class="w-100 h-100 d-flex align-items-center justify-content-center">
                      <div class="spinner-grow mt-5" role="status">
                          <span class="sr-only"></span>
                      </div>
                    </div>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="col-md-3 col-sm-6 col-12">
          <div class="card card-dark mb-2">
            <div class="card-body d-flex flex-column" style="min-height: 330px;">
              <h5 class="card-title fs-6 ">Latest Winners ðŸ¤‘</h5>
              <div class="card code"  style="flex: 1;" >
                <div id="latest-winners" class="list-group h-100">
                  <div class="h-100 d-flex align-items-center justify-content-center">
                    <div class="spinner-grow mt-5" role="status" >
                        <span class="sr-only"></span>
                    </div>
                  </div>
                </div>

              </div>
            </div>
          </div>
        </div>

        <div class="col-md-3 col-sm-6 col-12">
          <div class="card card-dark mb-2">
            <div class="card-body d-flex flex-column" style="min-height: 330px;">
              <h5 class="card-title fs-6">The Richest ðŸ’°</h5>
              <div class="card code"  style="flex: 1;" >

                <div id="richest-players" class="list-group h-100">
                  <div class="h-100 d-flex align-items-center justify-content-center">
                    <div class="spinner-grow mt-5" role="status" >
                        <span class="sr-only"></span>
                    </div>
                  </div>
                </div>
                
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- end of row -->
    </div>

    <script>
        let { min_transaction, rate_txn_icon, rate_text, rate_color } = <%- JSON.stringify(storage) %>;

        let txns = []
        let previousWinners = []
        let previousRichestPlayers = []

        function show({key, data}) {
          if(!data) return
          if(key === "STATUS"){
            const {marketOpen} = data
            $("#market_open").removeClass()
            $("#market_open").addClass("animate__animated animate__fadeIn")
            if(marketOpen){
              $("#market_open").addClass("status online")
            } else {
              $("#market_open").addClass("status offline")
            }
          }
          else if (key === "TRANSACTION"){
            const {username, timestamp,  amount, gain, rate, txnTime} = data
            if(txns.length === 0){
              $("#transaction").empty()
            }

            if(txns.length >= min_transaction){
              $(`#txn-${txns[0].timestamp}`).removeClass()
              $(`#txn-${txns[0].timestamp}`).addClass("animate__animated animate__fadeOutUp ")
              setTimeout(() => {
                $(`#txn-${txns[0].timestamp}`).remove()
                txns.shift()
              },300)
            }
            txns.push(data)
            let message = displayGachaTransaction(username, amount, gain, rate, txnTime)
            $("#transaction").append(`<li id="txn-${timestamp}" class="animate__animated animate__fadeInUp" >${message}</li>`)
          } else if (key === "LATEST_WINNERS"){
            const {winners} = data
            if(_.isEqual(previousWinners, winners)) return
            $("#latest-winners").empty()
            for(index in winners){
              const {username, amount, gain, rate, txnTime, timestamp} = winners[index]
              const item = displayListItemWinners(username, amount, gain, rate, txnTime)
              $("#latest-winners").append(`
              <div id='winner-${timestamp}' class="list-group-item code animate__animated animate__fadeIn py-1 px-2" style="font-size:.9rem;">
                <div class="d-flex align-items-center justify-content-between row">
                  ${item}
                </div>
              </div>
              `)
            }

            previousWinners = winners
          } else if (key === "RICHEST_PLAYERS"){
            const {players} = data
            if(_.isEqual(previousRichestPlayers, players)) return
            $("#richest-players").empty()
            for(index in players){
              const {username, coins} = players[index]
              const item = displayListItemRichestPlayer(username, coins, _.toNumber(index)===0)
              $("#richest-players").append(`
              <div id='richest-rank-${_.toNumber(index)+1}' class="list-group-item code animate__animated animate__fadeIn px-2" style="font-size:.9rem;">
                <div class="d-flex align-items-center justify-content-between row">
                  ${item}
                </div>
              </div>
              `)
            }
            previousRichestPlayers = players

          } else if(key === "SESSION_INCOME"){
            console.log("ðŸš€ ~ file: show.ejs ~ line 247 ~ show ~ data: income", data)
          } else if(key === "SESSION_PAYOUT"){
            console.log("ðŸš€ ~ file: show.ejs ~ line 247 ~ show ~ data: payout", data)
          }

        }

        function displayGachaTransaction(username, amount, gain, rate, txnTime){
          const _amount = roundDecimalPoint(amount)
          const _gain = roundDecimalPoint(gain)
          return `
          <div class="d-flex justify-content-between flex-nowrap" style="font-size:14px;">
            <div class="w-75 px-1 py-1" style="color:${rate_color[rate]};">${rate_txn_icon[rate]} <b>${username}</b> à¸¥à¸‡à¸—à¸¸à¸™ ${numberWithCommas(_amount)} à¹„à¸”à¹‰à¸£à¸±à¸š ${numberWithCommas(_gain)}</div>
            <div class="py-1 flex-shrink-1 text-end time-message">${txnTime}</div>
          </div>`
        }

        function displayListItemWinners(username, amount, gain, rate, txnTime){
          const _amount = roundDecimalPoint(amount)
          const _gain = roundDecimalPoint(gain)
          return `
          <div class="col-md-4 col-12 d-flex flex-column" >
            <span style="font-size:.6rem;color:${rate_color[rate]};">${rate_text[rate]}</span> 
            <span >${username}</span>
          </div>
          <div class="col-md-4 col-6 d-flex flex-column">
            <span style="font-size:.4rem;">à¸¥à¸‡à¸—à¸¸à¸™</span>
            <span style="font-size:.75rem;" >${numberWithCommas(_amount)}</span>
          </div>
          <div class="col-md-4 col-6 d-flex flex-column">
            <div style="font-size:.4rem;">à¹„à¸”à¹‰à¸£à¸±à¸š</div>
            <span style="font-size:.75rem;" >${numberWithCommas(_gain)}</span>
          </div>
          `
        }

        function displayListItemRichestPlayer(username, coins, isFirst=false){
          const _coins = roundDecimalPoint(coins)
          return `
          <div class="col-md-4 col-6 d-flex flex-column" >
            <span >${isFirst? 'ðŸ‘‘':''} ${username}</span>
          </div>
          <div class="col-md-4 col-6 d-flex flex-column text-end ">
            <span style="font-size:.8rem; white-space:nowrap;" >${numberWithCommas(_coins)}</span>
          </div>
          `
        }

        function roundDecimalPoint(num){
          return Math.round(num * 100) / 100
        }

        function numberWithCommas(x) {
          var parts = x.toString().split(".");
          parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
          return parts.join(".");
      }
    </script>
  </body>
</html>
